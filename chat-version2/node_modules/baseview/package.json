{
  "name": "baseview",
  "description": "minimalistic couchbase view client for node.js",
  "homepage": "http://about.me/PatrickHeneise",
  "repository": {
    "type": "git",
    "url": "git://github.com/PatrickHeneise/baseview.git"
  },
  "version": "0.0.3",
  "author": {
    "name": "Patrick Heneise",
    "email": "@PatrickHeneise"
  },
  "contributors": [
    {
      "name": "Nuno Job",
      "email": "nunojobpinto@gmail.com",
      "url": "http://nunojob.com"
    },
    {
      "name": "Peter Klaesson",
      "url": "https://github.com/alphapeter"
    }
  ],
  "keywords": [
    "couchbase",
    "request",
    "json",
    "nosql",
    "micro",
    "baseview",
    "database"
  ],
  "dependencies": {
    "request": "2.9.x",
    "errs": "0.2.x"
  },
  "devDependencies": {
    "async": "0.1.x",
    "specify": "0.6.x",
    "memcache": "*"
  },
  "scripts": {
    "test": "node node_modules/specify/bin/specify -e NOCK=on"
  },
  "main": "./baseview.js",
  "engines": {
    "node": ">=0.3.6"
  },
  "readme": "# baseview\n\n`baseview` is a minimalistic CouchBase client for node.js based on the minimalistic CouchDB driver [nano][1].\n\nCouchBase provides view data as JSON, which can be accessed and streamed with this client. To store and retrieve single documents/key-value pairs, the [memcached][2]-library is required.\n\n# usage\n``` js\n  baseview = require('baseview')('http://127.0.0.1:8092')\n  or\n  baseview = require('baseview')({url: 'http://127.0.0.1:8092', bucket: 'my_bucket'})\n  ...\n\n  // retrieve data from a view\n  baseview.view('design_doc', 'view_name', function(error, data) {\n    console.log(error, data);\n  });\n  \n  // retrieve data from a spatial index with bounding box.\n  // see 'sparta' for bbox calculations\n  baseview.spatial('geo', 'points', {bbox: bbox}, function(error, points) {\n    console.log(error, points);\n  });\n\n  //adding a design document\n  baseview.setDesign('design_doc', {\n     'names': {\n        'map': \"function(doc){if(doc.name){emit(doc.name);}}\"\n      },\n      'rating': {\n        'map': \"function(doc){if(doc.name && doc.rating){emit(doc.rating);}}\"\n      }\n    },\n    function(err, res){\n      // handle error http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views-designdoc-api-storing.html\n    }\n  );\n\n  // retrieve a design document\n  baseview.getDesign('design_doc', function(err,res) {\n    // http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views-designdoc-api-retrieving.html\n  });\n\n  // delete a design document\n  baseview.deleteDesign('design_doc', function(err, res) {\n    // handle error http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views-designdoc-api-deleting.html\n  });\n```\n\nTo create a geographical bounding box (bbox), have a look at [sparta](https://github.com/PatrickHeneise/sparta), a small library for geo calculations.\n\n## example with socket.io\n````js\n  io.sockets.on('connection', function (socket) {\n    baseview.view('feed', 'images', function(error, data) {\n      socket.emit('image_feed', data.rows);\n    });\n  });\n````\n\n# tests\nTests are written in specify. To run the tests, execute:\n    node tests/views.js\n    node tests/spatial.js\n\n\n# contribute\n\neveryone is welcome to contribute. patches, tests, bugfixes, new features\n\n1. create an [issue][3] on github so the community can comment on your idea\n2. fork `baseview` in github\n3. create a new branch `git checkout -b my_branch`\n4. create tests for the changes you made\n5. make sure you pass both existing and newly inserted tests\n6. commit your changes\n7. push to your branch `git push origin my_branch`\n8. create an pull request\n\n# meta\n\nproudly presented by Patrick Heneise, Barcelona.\n\n[1]: https://github.com/dscape/nano\n[2]: https://github.com/elbart/node-memcache\n[3]: http://github.com/PatrickHeneise/baseview/issues",
  "_id": "baseview@0.0.3",
  "dist": {
    "shasum": "312fae52a045c7ff7549a582a205e2a6979cc1b2",
    "tarball": "http://registry.npmjs.org/baseview/-/baseview-0.0.3.tgz"
  },
  "maintainers": [
    {
      "name": "patrickheneise",
      "email": "patrickheneise@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "312fae52a045c7ff7549a582a205e2a6979cc1b2",
  "_resolved": "https://registry.npmjs.org/baseview/-/baseview-0.0.3.tgz",
  "_from": "baseview@0.0.3"
}
